Metadata-Version: 2.4
Name: python_pubsub_devtools
Version: 0.1.0
Summary: Comprehensive development and debugging tools for PubSub-based event-driven architectures
Author-email: venantvr <venantvr@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/venantvr-trading/Python.PubSub.DevTools
Project-URL: Documentation, https://github.com/venantvr-trading/Python.PubSub.DevTools/wiki
Project-URL: Repository, https://github.com/venantvr-trading/Python.PubSub.DevTools
Project-URL: Issues, https://github.com/venantvr-trading/Python.PubSub.DevTools/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: flask>=2.0.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: pydantic>=2.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: pydot>=1.4.0
Provides-Extra: dev
Requires-Dist: setuptools>=65.0; extra == "dev"
Requires-Dist: wheel; extra == "dev"
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: flake8>=6.0; extra == "dev"
Requires-Dist: mypy>=1.0; extra == "dev"
Requires-Dist: black>=23.0; extra == "dev"

# PubSub Dev Tools

A comprehensive suite of development and debugging tools for PubSub-based event-driven architectures.

## Features

### ðŸŽ¯ Event Flow Visualization

- Interactive web-based event flow diagrams
- Hierarchical tree and complete graph views
- Namespace filtering and color coding
- Failed/rejected event filtering

### ðŸŽ¬ Event Recorder & Replayer

- Record event streams with timestamps
- Replay recorded events at different speeds
- Filter and analyze event sequences
- Web dashboard for managing recordings

### ðŸŽ° Mock Exchange Simulator

- Simulate market scenarios (bull, bear, sideways, volatile, crash)
- Real-time price generation with configurable volatility
- Web interface for scenario testing
- Statistics and visualization

### ðŸ§ª Scenario Testing Framework

- YAML-based scenario definitions
- Chaos injection (latency, failures, data corruption)
- Automated assertion checking
- Detailed HTML reports

### ðŸ“Š Event Metrics Collector (NEW!)

- Real-time event metrics collection
- Performance monitoring (P50, P95, P99 latencies)
- Error rate tracking
- Handler profiling
- CLI for quick inspection
- Export for integration with monitoring tools

## Installation

```bash
pip install python_pubsub_devtools
```

Or install from source:

```bash
git clone <repository>
cd Python.PubSub.DevTools
pip install -e .
```

## Quick Start

### Configuration

Create a `devtools_config.yaml` in your project:

```yaml
# Project paths
agents_dir: "path/to/agents"
events_dir: "path/to/events"
recordings_dir: "recordings"
scenarios_dir: "scenarios"
reports_dir: "reports"

# Event Flow configuration
event_flow:
  port: 5555
  test_agents:
    - "token_balance_refresh"
  namespace_colors:
    bot_lifecycle: "#81c784"
    market_data: "#64b5f6"
    indicator: "#9575cd"

# Event Recorder configuration
event_recorder:
  port: 5556

# Mock Exchange configuration
mock_exchange:
  port: 5557

# Scenario Testing configuration
scenario_testing:
  port: 5558
```

### Command Line Usage

```bash
# Launch event flow visualizer
pubsub-tools event-flow

# Launch event recorder
pubsub-tools event-recorder

# Launch mock exchange
pubsub-tools mock-exchange

# Run scenario tests
pubsub-tools test-scenarios --scenario my_scenario.yaml

# View event metrics
pubsub-tools metrics show
pubsub-tools metrics event OrderCreated
pubsub-tools metrics export metrics.json

# Launch all dashboards
pubsub-tools dashboard
```

### Programmatic Usage

```python
from python_pubsub_devtools import DevToolsConfig, EventFlowServer

# Load configuration
config = DevToolsConfig.from_yaml("devtools_config.yaml")

# Launch event flow server
server = EventFlowServer(config.event_flow)
server.run()
```

## Features Overview

### Event Flow Visualization

Visualize the complete event-driven architecture:

- Who publishes which events
- Who subscribes to which events
- Event namespaces and categorization
- Filter by namespace, hide failed/rejected events

### Event Recorder

Record and replay event streams for:

- Debugging complex event sequences
- Creating test fixtures
- Performance analysis
- Scenario reproduction

### Mock Exchange

Simulate market behavior:

- Bull market (steady uptrend)
- Bear market (steady downtrend)
- Sideways (ranging market)
- Volatile (high volatility)
- Crash (sudden drop then recovery)

### Scenario Testing

Test your event-driven system:

- Define scenarios in YAML
- Inject chaos (delays, failures, corruption)
- Validate assertions
- Generate detailed reports

### Event Metrics (NEW!)

Monitor your event-driven system in real-time:

- Automatic metrics collection with `@collect_metrics` decorator
- Performance tracking (latencies, throughput)
- Error rate monitoring
- Handler profiling
- CLI for inspection
- Export to JSON for integration with Prometheus/Grafana

**Example:**

```python
from python_pubsub_devtools.metrics import collect_metrics

@collect_metrics
def handle_order(event):
    process_order(event)
    # Metrics automatically collected!
```

See [docs/03_METRICS.md](docs/03_METRICS.md) for full documentation.

## Architecture

The library is designed with dependency injection for maximum flexibility:

```
python_pubsub_devtools/
â”œâ”€â”€ config.py           # Configuration management
â”œâ”€â”€ event_flow/         # Event flow analysis and visualization
â”œâ”€â”€ event_recorder/     # Recording and replaying events
â”œâ”€â”€ mock_exchange/      # Market simulation
â”œâ”€â”€ scenario_testing/   # Scenario-based testing
â”œâ”€â”€ metrics/           # Event metrics collector (NEW!)
â”œâ”€â”€ trading/           # Trading indicators and patterns
â”œâ”€â”€ web/               # Shared web assets (templates, CSS, JS)
â””â”€â”€ cli/               # Command-line interface
```

## Dependencies

- Flask >= 2.0.0
- Graphviz (for event flow diagrams)
- PyYAML >= 6.0
- Pydantic >= 2.0

## Development

```bash
# Install development dependencies
pip install -e .[dev]

# Run tests
pytest

# Run linters
flake8 python_pubsub_devtools
mypy python_pubsub_devtools
```

## License

MIT License
